---
# Install and configure MySQL server


- name: add OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - always

##
# Install MySQL
##
- name: install MySQL
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop: "{{ mysql_packages }}"
  register: _mysql_installed
  become: yes

- name: set the root password
  include_tasks: rootpw.yml
  when: _mysql_installed.changed and ansible_os_family == 'RedHat'

- name: get the version of MySQL (Debian)
  community.mysql.mysql_info:
    filter: version
    login_unix_socket: "{{ mysql_socket }}"
  become: yes
  register: _mysql_version
  when: ansible_os_family == 'Debian'
  tags: always

- name: get the version of MySQL (RedHat)
  community.mysql.mysql_info:
    filter: version
    config_file: "/root/.my.cnf"
  become: yes
  register: _mysql_version
  when: ansible_os_family == 'RedHat'
  tags: always



##
# Configure MySQL
##
- name: ensure log directory exists
  ansible.builtin.file:
    path: /var/log/mysql
    state: directory
    owner: mysql
    group: adm
    mode: 0770
  become: yes

- name: set mysql_server_id based on ip address
  ansible.builtin.set_fact:
    mysql_server_id: "{{ ansible_host|regex_replace('^.{0,3}|[.]') }}"
  when: mysql_server_id is not defined

- name: main configuration file
  ansible.builtin.template:
    src: mysqld.cnf.j2
    dest: "{{ mysql_file_conf }}"
    owner: root
    group: adm
    mode: 0644
    backup: yes
  notify:
    - restart mysql
  become: yes



##
# Set the timezone data
##
- name: populate MySQL timezone tables
  block:
    - name: timezones | generate the SQL statements
      ansible.builtin.shell: mysql_tzinfo_to_sql /usr/share/zoneinfo > /tmp/zoneinfo.sql
      args:
        executable: /bin/bash

    - name: timezones | load the timezone data
      ansible.builtin.shell: mysql mysql < /tmp/zoneinfo.sql
      args:
        executable: /bin/bash
      become: yes

  always:
    - name: timezones | remove the timezone data
      ansible.builtin.file:
        path: /tmp/zoneinfo.sql
        state: absent
      become: yes
  when: _mysql_installed is changed



##
# Ensure the security of the server
#
# This is similar to the `mysql_secure_installation` script
##
- name: ensure the MySQL server is running
  ansible.builtin.service:
    name: "{{ mysql_service }}"
    state: started
  become: yes
  tags:
    - mysql_security

- name: ensure the security of the MySQL server
  include_tasks: "security-{{ ansible_os_family }}.yml"
  tags:
    - mysql_security



##
# Allow access through the firewall
##
- name: firewall configuration
  include_tasks: firewall.yml
  when: mysql_firewall|bool and ansible_os_family == 'Debian'
  tags:
    - firewall_config


##
# Configure replication
##
- name: replication configuration
  include_tasks: replication.yml
  when: mysql_replication|bool
  tags:
    - mysql_replication_setup
    - mysql_repair_replication
    - mysql_replication_cron
    - cron


##
# Start MySQL
##
- name: ensure MySQL is started
  ansible.builtin.service:
    name: "{{ mysql_service }}"
    state: started
    enabled: yes
  become: yes
